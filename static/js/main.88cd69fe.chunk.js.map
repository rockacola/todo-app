{"version":3,"sources":["handlers/todo-storage-handler.ts","reducers/todo-slice.ts","store.ts","views/landing.tsx","views/not-found.tsx","helpers/root-state-helper.ts","partials/clickable-todo-item-block.tsx","partials/todo-item-block.tsx","partials/todo-list-filter.tsx","data/filter-options.ts","views/todo-list.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoStorageHandler","dataStr","localStorage","getItem","JSON","parse","lists","stringify","setItem","initialState","getLists","todoSlice","createSlice","name","reducers","addNewList","state","action","todoListId","payload","todoListTitle","push","id","title","items","setLists","addItemToExistingList","todoItem","targetList","find","list","editItem","targetItem","item","isComplete","deleteItem","todoItemId","newItems","filter","actions","store","configureStore","reducer","todo","todoReducer","middleware","getDefaultMiddleware","concat","logger","Landing","path","dispatch","useDispatch","allTodoLists","useSelector","console","log","process","length","firstTodoList","to","NotFound","className","RootStateHelper","ClickableTodoItemBlock","isSelected","onContextToggle","onEdit","onDelete","useState","tempTitle","setTempTitle","useEffect","isEditEnabled","useMemo","data-id","onClick","muatedItem","clone","type","checked","onChange","value","disabled","e","target","TodoItemBlock","props","TodoListFilter","filterOption","label","filterOptions","index","key","TodoList","params","useParams","currentState","newItemTitle","setNewItemTitle","currentFilterOption","setCurrentFilterOption","selectedTodoItemId","setSelectedTodoItemId","targetTodoListId","targetTodoList","getTodoListById","displayTodoItems","onTodoItemContextToggleHandler","onTodoItemEditHandler","mutatedItem","onTodoItemDeleteHandler","nextFilterIndex","map","onSubmit","preventDefault","newTodoItem","Math","floor","random","toString","placeholder","App","basename","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88cd69fe.chunk.js","sourcesContent":["import { TodoList } from '../interfaces'\n\nexport class TodoStorageHandler {\n  static getLists(): TodoList[] {\n    const dataStr = localStorage.getItem('todo-app:lists')\n    if (!dataStr) {\n      return []\n    }\n    const data = JSON.parse(dataStr)\n    return data\n  }\n\n  static setLists(lists: TodoList[]) {\n    const dataStr = JSON.stringify(lists)\n    localStorage.setItem('todo-app:lists', dataStr)\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport { TodoStorageHandler } from '../handlers'\nimport { TodoItem, TodoList } from '../interfaces'\n\ninterface TodoState {\n  lists: TodoList[]\n}\n\nconst initialState: TodoState = {\n  lists: TodoStorageHandler.getLists(),\n}\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    addNewList: (state, action) => {\n      const todoListId: string = action.payload.todoListId\n      // TODO: check if the supplied ID is indeed unique\n      const todoListTitle: string = action.payload.todoListTitle\n      state.lists.push({\n        id: todoListId,\n        title: todoListTitle,\n        items: [],\n      })\n\n      TodoStorageHandler.setLists(state.lists)\n    },\n\n    addItemToExistingList: (state, action) => {\n      const todoListId: string = action.payload.todoListId\n      const todoItem: TodoItem = action.payload.todoItem\n\n      const targetList = state.lists.find((list) => list.id === todoListId)\n      if (!targetList) {\n        return\n      }\n\n      targetList.items.push(todoItem)\n      TodoStorageHandler.setLists(state.lists)\n    },\n\n    editItem: (state, action) => {\n      const todoListId: string = action.payload.todoListId\n      const todoItem: TodoItem = action.payload.todoItem\n\n      const targetList = state.lists.find((list) => list.id === todoListId)\n      if (!targetList) {\n        // TODO: warning\n        return\n      }\n\n      const targetItem = targetList.items.find(\n        (item) => item.id === todoItem.id\n      )\n      if (!targetItem) {\n        // TODO: warning\n        return\n      }\n\n      targetItem.title = todoItem.title\n      targetItem.isComplete = todoItem.isComplete\n      TodoStorageHandler.setLists(state.lists)\n    },\n\n    deleteItem: (state, action) => {\n      const todoListId: string = action.payload.todoListId\n      const todoItemId: string = action.payload.todoItemId\n\n      const targetList = state.lists.find((list) => list.id === todoListId)\n      if (!targetList) {\n        // TODO: warning\n        return\n      }\n\n      const newItems = targetList.items.filter((item) => item.id !== todoItemId)\n      targetList.items = newItems\n      TodoStorageHandler.setLists(state.lists)\n    },\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { addNewList, addItemToExistingList, deleteItem, editItem } =\n  todoSlice.actions\n\nexport default todoSlice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport logger from 'redux-logger'\nimport todoReducer from './reducers/todo-slice'\n\nexport const store = configureStore({\n  reducer: {\n    todo: todoReducer,\n  },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n})\n\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n","import { useDispatch, useSelector } from 'react-redux'\nimport { Redirect } from 'react-router'\nimport { RootState } from '../store'\nimport { addNewList } from '../reducers/todo-slice'\n\nfunction Landing() {\n  const dispatch = useDispatch()\n  const allTodoLists = useSelector((state: RootState) => state.todo.lists)\n  let path: string\n\n  console.log('process.env:', process.env)\n\n  if (allTodoLists.length === 0) {\n    const DEFAULT_ID = '1'\n    dispatch(\n      addNewList({\n        todoListId: DEFAULT_ID,\n        todoListTitle: 'Untitled List',\n      })\n    )\n    path = `/todos/${DEFAULT_ID}`\n  } else {\n    const firstTodoList = allTodoLists[0]\n    path = `/todos/${firstTodoList.id}`\n  }\n\n  return <Redirect to={path} />\n}\n\nexport default Landing\n","function NotFound() {\n  return (\n    <div className=\"h-screen bg-gray-100\">\n      <div className=\"py-8\">\n        <div className=\"w-100 max-w-sm mx-auto bg-white rounded p-4 text-center\">\n          <h1 className=\"text-lg font-bold text-gray-800\">Not Found</h1>\n          <p>Check your URL and try again.</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default NotFound\n","import { TodoList } from '../interfaces'\nimport { RootState } from '../store'\n\nexport class RootStateHelper {\n  static getTodoListById(\n    state: RootState,\n    todoListId: string\n  ): TodoList | undefined {\n    return state.todo.lists.find((list) => list.id === todoListId)\n  }\n}\n","import {\n  ChevronDownIcon,\n  ChevronRightIcon,\n  PencilAltIcon,\n  TrashIcon,\n} from '@heroicons/react/outline'\nimport { clone } from 'lodash'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { TodoItemBlockProps } from './todo-item-block'\n\nexport function ClickableTodoItemBlock({\n  item,\n  isSelected,\n  onContextToggle,\n  onEdit,\n  onDelete,\n}: TodoItemBlockProps) {\n  const [tempTitle, setTempTitle] = useState<string>(item.title)\n\n  const onTempTitleChangeHandler = (e: React.ChangeEvent) => {\n    setTempTitle((e.target as any).value) // TODO: typing\n  }\n\n  useEffect(() => {\n    if (!isSelected) {\n      setTempTitle(item.title)\n    }\n  }, [item, isSelected])\n\n  const isEditEnabled = useMemo(() => {\n    return item.title !== tempTitle\n  }, [item, tempTitle])\n\n  const onIsCompleteToggleHandler = () => {\n    const muatedItem = clone(item)\n    muatedItem.isComplete = !item.isComplete\n    onEdit(muatedItem)\n  }\n\n  const onTitleEditHandler = () => {\n    if (!isEditEnabled) {\n      return\n    }\n\n    const muatedItem = clone(item)\n    muatedItem.title = tempTitle\n    onEdit(muatedItem)\n  }\n\n  return (\n    <div className=\"bg-blue-100 bg-opacity-50 transition hover:bg-opacity-80 \">\n      <div className=\"flex items-stretch overflow-hidden\" data-id={item.id}>\n        <div\n          className=\"px-5 py-4 transition bg-indigo-200 bg-opacity-0 hover:bg-opacity-40 cursor-pointer\"\n          onClick={onIsCompleteToggleHandler}\n        >\n          <input\n            type=\"checkbox\"\n            checked={item.isComplete}\n            className=\"checked:bg-blue-600 checked:border-transparent\"\n            onChange={() => {}}\n          />\n        </div>\n        <div className=\"flex-grow\">\n          {!isSelected && <div className=\"p-4 leading-tight\">{item.title}</div>}\n          {isSelected && (\n            <textarea\n              className=\"p-4 w-full leading-tight bg-transparent\"\n              name=\"title\"\n              value={tempTitle}\n              disabled={!isSelected}\n              onChange={onTempTitleChangeHandler}\n            />\n          )}\n        </div>\n\n        {/* Context operator */}\n        <div\n          className=\"p-4 text-gray-500 transition bg-indigo-200 bg-opacity-0 hover:bg-opacity-40 cursor-pointer \"\n          onClick={() => onContextToggle(item)}\n        >\n          {!!isSelected && <ChevronDownIcon className=\"w-6 h-6\" />}\n          {!isSelected && <ChevronRightIcon className=\"w-6 h-6\" />}\n        </div>\n      </div>\n\n      {/* Context content */}\n      {!!isSelected && (\n        <div className=\"flex items-center justify-end\">\n          <div\n            className={`p-4 ${\n              isEditEnabled\n                ? 'bg-indigo-500 bg-opacity-60 hover:bg-opacity-100 cursor-pointer'\n                : 'bg-gray-200'\n            } text-gray-100 transition `}\n            onClick={onTitleEditHandler}\n          >\n            <PencilAltIcon className=\"w-6 h-6\" />\n          </div>\n          <div\n            className=\"p-4 bg-red-500 bg-opacity-60 hover:bg-opacity-100 text-gray-100 cursor-pointer transition\"\n            onClick={() => onDelete(item)}\n          >\n            <TrashIcon className=\"w-6 h-6\" />\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n","import { TodoItem } from '../interfaces'\nimport { ClickableTodoItemBlock } from './clickable-todo-item-block'\n\nexport interface TodoItemBlockProps {\n  item: TodoItem\n  isSelected: boolean\n  onContextToggle: (item: TodoItem) => void\n  onEdit: (mutatedItem: TodoItem) => void\n  onDelete: (item: TodoItem) => void\n}\n\nexport function TodoItemBlock(props: TodoItemBlockProps) {\n  const operationStyle = process.env.REACT_APP_OPERATION_STYLE\n  // console.log('operationStyle:', operationStyle)\n\n  if (operationStyle === 'click') {\n    return <ClickableTodoItemBlock {...props} />\n  }\n\n  throw new Error(`Invalid operation style: [${operationStyle}]`)\n}\n","import { FilterIcon } from '@heroicons/react/outline'\nimport { FilterOptionItem } from '../interfaces/filter'\n\ninterface TodoListFilterProps {\n  filterOption: FilterOptionItem\n  onClick: () => void\n}\n\nexport function TodoListFilter({ filterOption, onClick }: TodoListFilterProps) {\n  return (\n    <div\n      className=\"flex w-36 items-center bg-indigo-300 bg-opacity-60 transition hover:bg-opacity-100 rounded-tl-lg px-3 py-2 cursor-pointer text-gray-600\"\n      onClick={onClick}\n    >\n      <FilterIcon className=\"w-4 h-4\" />\n      <span className=\"ml-2\">{filterOption.label}</span>\n    </div>\n  )\n}\n","import { FilterOptionItem } from '../interfaces'\n\nexport const filterOptions: FilterOptionItem[] = [\n  { index: 0, key: 'incomplete', label: 'Incomplete' },\n  { index: 1, key: 'completed', label: 'Completed' },\n  { index: 2, key: 'all', label: 'All' },\n]\n","import React, { useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams } from 'react-router'\nimport { RootStateHelper } from '../helpers'\nimport { TodoItem } from '../interfaces'\nimport { TodoItemBlock, TodoListFilter } from '../partials'\nimport {\n  addItemToExistingList,\n  deleteItem,\n  editItem,\n} from '../reducers/todo-slice'\nimport { RootState } from '../store'\nimport { EmojiHappyIcon } from '@heroicons/react/outline'\nimport { FilterOptionItem } from '../interfaces'\nimport { filterOptions } from '../data'\n\ninterface TodoListParam {\n  id: string\n}\n\nfunction TodoList() {\n  const dispatch = useDispatch()\n  const params = useParams<TodoListParam>()\n  const currentState = useSelector((state: RootState) => state)\n  const [newItemTitle, setNewItemTitle] = useState<string>('')\n  const [currentFilterOption, setCurrentFilterOption] =\n    useState<FilterOptionItem>(filterOptions[0])\n  const [selectedTodoItemId, setSelectedTodoItemId] = useState<string>('')\n  const targetTodoListId = params.id // TODO: validate input and edge case handling\n  const targetTodoList = RootStateHelper.getTodoListById(\n    currentState,\n    targetTodoListId\n  ) // TODO: edge case handling\n  const displayTodoItems: TodoItem[] = useMemo(() => {\n    if (!targetTodoList) {\n      return []\n    }\n    if (currentFilterOption.key === 'incomplete') {\n      return targetTodoList.items.filter((item) => !item.isComplete)\n    }\n    if (currentFilterOption.key === 'completed') {\n      return targetTodoList.items.filter((item) => !!item.isComplete)\n    }\n    return targetTodoList.items\n  }, [currentFilterOption, targetTodoList])\n\n  const onFilterOperatorClickHandler = () => {\n    console.log('onFilterOperatorClickHandler triggered.')\n\n    const nextFilterIndex =\n      (currentFilterOption.index + 1) % filterOptions.length\n    setCurrentFilterOption(filterOptions[nextFilterIndex])\n    setSelectedTodoItemId('')\n  }\n\n  const onNewItemTitleChangeHandler = (e: React.ChangeEvent) => {\n    // console.log('onNewItemTitleChangeHandler triggered. e:', e)\n    setNewItemTitle((e.target as any).value) // TODO: typing\n  }\n\n  const onSubmitHandler = (e: React.FormEvent) => {\n    e.preventDefault()\n    console.log('onSubmitHandler triggered. e:', e)\n\n    // TODO: input validation, boundary check etc\n    // TODO: duplication detection\n\n    const newTodoItem: TodoItem = {\n      id: Math.floor(Math.random() * 1000000).toString(),\n      title: newItemTitle,\n      isComplete: false,\n    }\n    dispatch(\n      addItemToExistingList({\n        todoListId: targetTodoListId,\n        todoItem: newTodoItem,\n      })\n    )\n    setNewItemTitle('')\n  }\n\n  const onTodoItemContextToggleHandler = (item: TodoItem) => {\n    if (selectedTodoItemId === item.id) {\n      setSelectedTodoItemId('')\n      return\n    }\n    setSelectedTodoItemId(item.id)\n  }\n\n  const onTodoItemEditHandler = (mutatedItem: TodoItem) => {\n    console.log('onTodoItemEditHandler triggered.')\n\n    dispatch(\n      editItem({\n        todoListId: targetTodoListId,\n        todoItem: mutatedItem,\n      })\n    )\n    setSelectedTodoItemId('')\n  }\n\n  const onTodoItemDeleteHandler = (item: TodoItem) => {\n    console.log('onTodoItemDeleteHandler triggered.')\n\n    dispatch(\n      deleteItem({\n        todoListId: targetTodoListId,\n        todoItemId: item.id,\n      })\n    )\n    setSelectedTodoItemId('')\n  }\n\n  return (\n    <div className=\"h-screen bg-gray-100\">\n      <div className=\"w-100 max-w-xl h-full mx-auto bg-white py-4 md:px-4\">\n        <h1 className=\"text-lg font-bold text-gray-800 text-center leading-tight p-4\">\n          {targetTodoList?.title}\n        </h1>\n        <div className=\"mt-4 flex justify-between\">\n          <div>{/* No content for now */}</div>\n          <div>\n            <TodoListFilter\n              filterOption={currentFilterOption}\n              onClick={onFilterOperatorClickHandler}\n            />\n          </div>\n        </div>\n        <div className=\"\">\n          {displayTodoItems.map((item, index) => (\n            <TodoItemBlock\n              key={item.id}\n              item={item}\n              isSelected={item.id === selectedTodoItemId}\n              onContextToggle={onTodoItemContextToggleHandler}\n              onEdit={onTodoItemEditHandler}\n              onDelete={onTodoItemDeleteHandler}\n            />\n          ))}\n        </div>\n        <div>\n          <form onSubmit={onSubmitHandler}>\n            <div className=\"flex items-center\">\n              <input\n                className=\"p-4 bg-gray-50 focus:bg-gray-100 flex-grow\"\n                type=\"text\"\n                name=\"title\"\n                value={newItemTitle}\n                onChange={onNewItemTitleChangeHandler}\n                placeholder=\"New item...\"\n              />\n              <button\n                className=\"px-3 py-4 bg-green-300 bg-opacity-60 transition hover:bg-opacity-100\"\n                type=\"submit\"\n              >\n                Add\n              </button>\n            </div>\n          </form>\n        </div>\n        <div className=\"my-8\">\n          <EmojiHappyIcon className=\"w-16 h-16 text-gray-100 m-auto\" />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TodoList\n","import { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { store } from './store'\nimport { Provider } from 'react-redux'\nimport Landing from './views/landing'\nimport NotFound from './views/not-found'\nimport TodoList from './views/todo-list'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route path=\"/todos/:id\" exact>\n            <TodoList />\n          </Route>\n          <Route path=\"/\" exact>\n            <Landing />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport './global.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}